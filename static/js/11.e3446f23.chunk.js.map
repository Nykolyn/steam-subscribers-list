{"version":3,"sources":["Components/Buttons/JellyButton.js","redux/selectors/subscribtionSelectors.js","Components/SteamList/SteamForm.js","services/subsApi.js","Components/SteamList/SteamItem.js","redux/operations/subscribtionsOperations.js","Components/SteamList/SteamList.js","helpers/constants.js","Components/SteamList/Pagination.js","Components/SteamList/SubsInfo.js","Pages/Subscribers.js"],"names":["JellyButton","_ref","text","onClick","type","loading","react_default","a","createElement","className","defaultProps","subsSelector","state","subscribtions","subs","subsLoadSelector","getSubs","addSubLoadSelector","addSub","isSameDaySelector","date","sameDayAdded","isSameWeekSelector","sameWeekAdded","isSameMonthSelector","sameMonthAdded","lastYearSelector","lastYearAdded","toastError","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","toastSuccess","length","success","concat","SteamForm","name","userID","warn","handleInputChange","_ref$target","target","value","_this","setState","Object","defineProperty","handleFormSubmit","e","preventDefault","_this$state","trim","includes","props","handleSubmit","_this$state2","this","_this$props","handleFilterSubs","query","showFavorites","onChangeText","onReset","onSubmit","autoComplete","onChange","placeholder","Buttons_JellyButton","IconButton","Clear_default","autoFocus","react_toastify","newestOnTop","rtl","pauseOnVisibilityChange","Component","connect","URL","process","getSubsApi","id","axios","get","then","response","data","postSubApi","sub","post","newSub","updateFavApi","patch","updatedSub","SteamItem","_id","favorite","updateFavSub","_useState","useState","_useState2","slicedToArray","setLoading","handleUpdateFavSub","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","setTimeout","_callee","_context","stop","apply","arguments","Fragment","timeAgo","react_spinners","color","src","alt","mDTP","_ref3","_callee3","dispatch","getState","token","_context3","tokenSelector","abrupt","setAuthToken","updateFavSubStart","sent","updateFavSubSuccess","t0","updateFavSubError","console","_x5","_x6","addSubLoading","subscribers","useEffect","CircularProgress","map","key","SteamList_SteamItem","START_PAGE","PER_PAGE_SUCBSCRIPTIONS_LIST","Pagination","maxPage","handleChangePage","currentPage","disabled","ArrowBackIos_default","ArrowForwardIos_default","SubsInfo","showTotalAmmountOfSubs","selectors","filterSubs","arr","undefined","filter","el","toLowerCase","Subscribers","perPage","resetFilter","handleChangePageOnFilter","Math","ceil","renderSubsList","isAuth","ownerId","find","toLocaleLowerCase","objectSpread","Date","toLocaleDateString","toLocaleTimeString","res","filterFavorites","filteredSubs","renderPaginationList","_this$state3","indexOfLastSub","indexOfFirstSub","toConsumableArray","reverse","slice","_this$props2","prevProps","prevState","log","_this$state4","subsLoad","SteamList_SteamForm","SteamList_SubsInfo","Components_SteamList_SteamList","SteamList_Pagination","subsRequestStart","subsRequestSuccess","subsRequestError","_x","_x2","addSubRequest","addSubSuccess","addSubError","_x3","_x4","authSelector","addSubLoad","idSelector"],"mappings":"gNAGMA,EAAc,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,QAASC,EAAlBH,EAAkBG,KAAMC,EAAxBJ,EAAwBI,QAAxB,OAClBC,EAAAC,EAAAC,cAAA,UAAQJ,KAAMA,EAAMK,UAAU,eAAeN,QAASA,GACnDE,EACCC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,cAEAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeP,KAKlCF,EAAYU,aAAe,CACzBP,QAAS,KACTE,SAAS,GAUIL,mCCzBFW,EAAe,SAAAC,GAAK,OAAIA,EAAMC,cAAcC,MAC5CC,EAAmB,SAAAH,GAAK,OAAIA,EAAMC,cAAcR,QAAQW,SACxDC,EAAqB,SAAAL,GAAK,OAAIA,EAAMC,cAAcR,QAAQa,QAI1DC,EAAoB,SAAAP,GAAK,OAAIA,EAAMC,cAAcO,KAAKC,cACtDC,EAAqB,SAAAV,GAAK,OACrCA,EAAMC,cAAcO,KAAKG,eACdC,EAAsB,SAAAZ,GAAK,OACtCA,EAAMC,cAAcO,KAAKK,gBACdC,EAAmB,SAAAd,GAAK,OAAIA,EAAMC,cAAcO,KAAKO,eCCrDC,EAAa,kBACxBC,IAAMC,MAAM,kCAAyB,CACnCC,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,KAGFC,EAAe,SAAAC,GAAM,OAChCT,IAAMU,QAAN,0CAAAC,OAA8CF,GAAU,CACtDP,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,KAGTK,6MAQJ7B,MAAQ,CACN8B,KAAM,GACNC,OAAQ,MAGVC,KAAO,SAAC1C,GAAD,OACL2B,IAAMe,KAAN,wCAAAJ,OAAsBtC,GAAc,oBAApC,KAA6D,CAC3D6B,SAAU,WACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,OAGfS,kBAAoB,SAAA5C,GAAA,IAAA6C,EAAA7C,EAAG8C,OAAUL,EAAbI,EAAaJ,KAAMM,EAAnBF,EAAmBE,MAAnB,OAClBC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBT,EAAOM,OAE1BK,iBAAmB,SAAAC,GACjBA,EAAEC,iBADoB,IAAAC,EAEGP,EAAKrC,MAAtB8B,EAFcc,EAEdd,KAAMC,EAFQa,EAERb,OACd,MAAoB,KAAhBD,EAAKe,QAAmC,KAAlBd,EAAOc,OAAsBR,EAAKL,OACxDD,EAAOe,SAAS,KAAaT,EAAKL,KAAK,0BAC3CK,EAAKU,MAAMC,aAAaX,EAAKrC,OACtBqC,EAAKC,SAAS,CAAER,KAAM,GAAIC,OAAQ,+EAGlC,IAAAkB,EACkBC,KAAKlD,MAAtB8B,EADDmB,EACCnB,KAAMC,EADPkB,EACOlB,OADPoB,EASHD,KAAKH,MANPK,EAHKD,EAGLC,iBACAC,EAJKF,EAILE,MACAC,EALKH,EAKLG,cACAC,EANKJ,EAMLI,aACA9D,EAPK0D,EAOL1D,QACA+D,EARKL,EAQLK,QAEF,OACE9D,EAAAC,EAAAC,cAAA,QAAM6D,SAAUP,KAAKT,iBAAkB5C,UAAU,YAC/CH,EAAAC,EAAAC,cAAA,SACEJ,KAAK,OACLkE,aAAa,MACbtB,MAAON,EACPA,KAAK,OACL6B,SAAUT,KAAKjB,kBACfpC,UAAU,kBACV+D,YAAY,iBAEdlE,EAAAC,EAAAC,cAAA,SACEJ,KAAK,OACLkE,aAAa,MACbtB,MAAOL,EACPD,KAAK,SACL6B,SAAUT,KAAKjB,kBACfpC,UAAU,kBACV+D,YAAY,YAEdlE,EAAAC,EAAAC,cAACiE,EAAD,CAAavE,KAAK,cAAcG,QAASA,EAASD,KAAK,WACvDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACZwD,GACC3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CACEvE,QAAS,kBAAMiE,KACf3D,UAAU,0BAEVH,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,CAAWE,UAAU,2BAI3BH,EAAAC,EAAAC,cAAA,SACEJ,KAAK,OACLkE,aAAa,MACbtB,MAAOiB,EACPW,WAAS,EACTJ,YAAa,kBACb9B,KAAK,QACL6B,SAAUP,EACVvD,UAAU,qBAGdH,EAAAC,EAAAC,cAACiE,EAAD,CACEvE,KAAMiE,EACN/D,KAAK,SACLD,QAAS,kBAAM+D,OAEjB5D,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CACE9C,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjB6C,aAAW,EACX5C,cAAY,EACZ6C,KAAK,EACLC,yBAAuB,EACvB5C,WAAS,EACTD,cAAY,YAtGE8C,aAoHTC,cAJF,SAAAtE,GAAK,MAAK,CACrBP,QAASY,EAAmBL,KAGfsE,CAAczC,qFClJvB0C,EAAMC,4CAGCC,EAAa,SAAAC,GAAE,OAC1BC,IAAMC,IAAN,GAAAhD,OAAa2C,EAAb,iBAAA3C,OAAgC8C,IAAMG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAK7E,QAE1D8E,EAAa,SAAAC,GAAG,OAC3BN,IACGO,KADH,GAAAtD,OACW2C,EADX,gBAC8BU,GAC3BJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKI,UAEvBC,EAAe,SAACV,EAAIO,GAAL,OAC1BN,IACGU,MADH,GAAAzD,OACY2C,EADZ,2BAAA3C,OACyC8C,GAAMO,GAC5CJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKO,8BCR9BC,EAAY,SAAAlG,GAAqD,IAA7CqF,EAA6CrF,EAAlDmG,IAAS1D,EAAyCzC,EAAzCyC,KAAMtB,EAAmCnB,EAAnCmB,KAAMiF,EAA6BpG,EAA7BoG,SAAUC,EAAmBrG,EAAnBqG,aAAmBC,EACvCC,oBAAS,GAD8BC,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAoD,EAAA,GAC9DlG,EAD8DoG,EAAA,GACrDE,EADqDF,EAAA,GAG/DG,EAAkB,eAAAC,EAAA1D,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAAxG,EAAAyG,KAAG,SAAAC,IAAA,OAAAF,EAAAxG,EAAA2G,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACzBV,GAAW,GADcQ,EAAAE,KAAA,EAGnBf,EAAahB,EAAI,CAAEe,UAAWA,IAHX,OAKzBiB,WAAUnE,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAAxG,EAAAyG,KAAC,SAAAO,IAAA,OAAAR,EAAAxG,EAAA2G,KAAA,SAAAM,GAAA,cAAAA,EAAAJ,KAAAI,EAAAH,MAAA,OACTV,GAAW,GADF,wBAAAa,EAAAC,SAAAF,MAER,KAPsB,wBAAAJ,EAAAM,SAAAR,MAAH,yBAAAJ,EAAAa,MAAA5D,KAAA6D,YAAA,GAUxB,OACErH,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqH,SAAA,KACEtH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKkC,GACLpC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,aAAA+B,OAAoCqF,YAAQzG,GAA5C,MAAAoB,OAAsDpB,KAExDd,EAAAC,EAAAC,cAAA,UACEC,UAAU,gBACVL,KAAK,SACLD,QAAS,kBAAMyG,MAEdvG,EACCC,EAAAC,EAAAC,cAACsH,EAAA,WAAD,CAAYC,MAAM,OAAO1H,QAASA,IAElCC,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVuH,IACE3B,EACI,sDACA,sDAEN4B,IAAI,WAQhB9B,EAAUzF,aAAe,CACvB2F,UAAU,GAWZ,IAAM6B,EAAO,CACX5B,aClB0B,SAAChB,EAAIe,GAAL,sBAAA8B,EAAAhF,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAAxG,EAAAyG,KAAkB,SAAAoB,EAAOC,EAAUC,GAAjB,IAAAC,EAAA1C,EAAA,OAAAkB,EAAAxG,EAAA2G,KAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,UACtCkB,EAAQE,YAAcH,KADgB,CAAAE,EAAAnB,KAAA,eAAAmB,EAAAE,OAAA,wBAG5CC,YAAaJ,GACbF,EAASO,eAJmCJ,EAAApB,KAAA,EAAAoB,EAAAnB,KAAA,EAMxBrB,EAAaV,EAAIe,GANO,cAMpCR,EANoC2C,EAAAK,KAAAL,EAAAnB,KAAA,GAO7BgB,EAASS,YAAoBjD,IAPA,eAAA2C,EAAAE,OAAA,SAAAF,EAAAK,MAAA,QAAAL,EAAApB,KAAA,GAAAoB,EAAAO,GAAAP,EAAA,SAS1CH,EAASW,YAAiBR,EAAAO,KAC1BE,QAAQnH,MAAR,sCAAAU,OAAAgG,EAAAO,KAV0C,yBAAAP,EAAAf,SAAAW,EAAA,kBAAlB,gBAAAc,EAAAC,GAAA,OAAAhB,EAAAT,MAAA5D,KAAA6D,YAAA,KDqBbzC,cACb,KACAgD,EAFahD,CAGbiB,GE1BajB,cAJF,SAAAtE,GAAK,MAAK,CACrBwI,cAAenI,EAAmBL,KAGrBsE,CApCG,SAAAjF,GAAoC,IAAjCoJ,EAAiCpJ,EAAjCoJ,YAAaD,EAAoBnJ,EAApBmJ,cAAoB7C,EACtBC,oBAAS,GADaC,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAoD,EAAA,GAC7ClG,EAD6CoG,EAAA,GACpCE,EADoCF,EAAA,GAWpD,OARA6C,oBAAU,WACR,OACS3C,IADLyC,IAKH,CAACA,IAGF9I,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBACXJ,GACCC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BACZH,EAAAC,EAAAC,cAAC+I,EAAA,EAAD,OAGHF,EAAYG,IAAI,SAAA3D,GAAG,OAClBvF,EAAAC,EAAAC,cAAA,MAAIiJ,IAAK5D,EAAIlD,OAAQlC,UAAU,mBAC7BH,EAAAC,EAAAC,cAACkJ,EAAc7D,SC3BZ8D,EAAa,EACbC,EAA+B,2CC4C7BC,GArCI,SAAA5J,GAAA,IAAG6J,EAAH7J,EAAG6J,QAASC,EAAZ9J,EAAY8J,iBAAkBC,EAA9B/J,EAA8B+J,YAA9B,OACjB1J,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CACEjE,UAAU,oBACVsH,MAAM,UACNrF,KAAK,OACLuH,SAAUD,IAAgBL,EAC1BxJ,QAAS,kBAAM4J,EAAiB,UAEhCzJ,EAAAC,EAAAC,cAAC0J,GAAA3J,EAAD,CACEE,UAAU,oBACVwJ,SAAUD,IAAgBL,KAG9BrJ,EAAAC,EAAAC,cAAA,kBACQwJ,EADR,OACyBF,KAEzBxJ,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CACEjE,UAAU,oBACViC,KAAK,OACLuH,SAAUD,IAAgBF,IAC1B3J,QAAS,kBAAM4J,EAAiB,UAEhCzJ,EAAAC,EAAAC,cAAC2J,GAAA5J,EAAD,CACEE,UAAU,oBACVwJ,SAAUD,IAAgBL,OC3BlC,SAASS,GAATnK,GAMG,IALDoK,EAKCpK,EALDoK,uBACAhJ,EAICpB,EAJDoB,aACAE,EAGCtB,EAHDsB,cACAE,EAECxB,EAFDwB,eACAE,EACC1B,EADD0B,cAEA,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,iBAA+C4J,GAC/C/J,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,gBAA8CY,GAC9Cf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,oBAAkDc,GAClDjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,qBAAmDgB,GAClDE,GACCrB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,oBAAkDkB,IAM1DyI,GAAS1J,aAAe,CACtBiB,cAAe,GAWjB,IAOeuD,eAPF,SAAAtE,GAAK,MAAK,CACrBS,aAAciJ,EAA4B1J,GAC1CW,cAAe+I,EAA6B1J,GAC5Ca,eAAgB6I,EAA8B1J,GAC9Ce,cAAe2I,EAA2B1J,KAG7BsE,CAAckF,ICvBvBG,GAAa,SAACC,GAAD,IAAMvG,EAAN0D,UAAArF,OAAA,QAAAmI,IAAA9C,UAAA,GAAAA,UAAA,GAAc,GAAd,OACjB6C,EAAIE,OACF,SAAAC,GAAE,OACAA,EAAGjI,KAAKkI,cAAclH,SAASO,EAAM2G,gBACrCD,EAAGhI,SAAWsB,KAGd4G,8MACJjK,MAAQ,CACNqD,MAAO,GACPC,eAAe,EACfC,aAAc,kBACd2G,QAASlB,EACTI,YAAaL,KAsBfoB,YAAc,kBAAM9H,EAAKC,SAAS,CAAEe,MAAO,QAE3C+G,yBAA2B,WAAM,IACvBhB,EAAgB/G,EAAKrC,MAArBoJ,YACJA,EAAc/G,EAAK6G,WACrB7G,EAAKC,SAAS,CAAE8G,YAAa/G,EAAK6G,YAEhCE,EAAc,GAChB/G,EAAKC,SAAS,CAAE8G,YAAa,OAIjCF,QAAU,WACR,OAAOmB,KAAKC,KACVjI,EAAKkI,iBAAiB7I,OAASsH,MAInChG,aAAe,SAAAiC,GAAO,IAAA9B,EACsBd,EAAKU,MAAvCyH,EADYrH,EACZqH,OAAQlK,EADI6C,EACJ7C,OAAQJ,EADJiD,EACIjD,KAAMuK,EADVtH,EACUsH,QACzBD,IACoBtK,EAAKwK,KAC5B,SAAAX,GAAE,OACAA,EAAGjI,KAAKkI,cAAcnH,SAAWoC,EAAInD,KAAK6I,oBAAoB9H,QAC9DkH,EAAGhI,SAAWkD,EAAIlD,OAAOc,SAI3B7B,IASAV,EAPciC,OAAAqI,EAAA,EAAArI,CAAA,CACZkD,UAAU,EACVjF,KAAI,GAAAoB,QAAK,IAAIiJ,MAAOC,qBAAhB,KAAAlJ,QAAwC,IAAIiJ,MAAOE,uBACpD9F,EAHS,CAIZwF,aAGe5F,KAAK,SAAAmG,GACpB,OAAKA,EAEEvJ,EAAavB,EAAKwB,OAAS,GAFjBV,UAOvBoC,iBAAmB,SAAAV,GAAC,OAAIL,EAAKC,SAAS,CAAEe,MAAOX,EAAEP,OAAOC,WAExD6I,gBAAkB,kBAAM5I,EAAKU,MAAM7C,KAAK4J,OAAO,SAAAC,GAAE,OAAIA,EAAGtE,cAExDnC,cAAgB,kBACdjB,EAAKC,SAAS,SAAAtC,GAAK,MAAK,CACtBsD,eAAgBtD,EAAMsD,cACtBC,aAAcvD,EAAMsD,cAAgB,kBAAoB,iBAG5D4H,aAAe,SAAChL,EAAMmD,GAAP,OAAiBsG,GAAWzJ,EAAMmD,MAEjDoG,uBAAyB,WAAM,IACrBvJ,EAASmC,EAAKU,MAAd7C,KADqB0C,EAEIP,EAAKrC,MAA9BsD,EAFqBV,EAErBU,cAAeD,EAFMT,EAENS,MAEvB,OAAOC,EACHjB,EAAK6I,aAAa7I,EAAK4I,kBAAmB5H,GAAO3B,OACjDW,EAAK6I,aAAahL,EAAMmD,GAAO3B,UAGrC6I,eAAiB,WAAM,IACbrK,EAASmC,EAAKU,MAAd7C,KADa+C,EAEYZ,EAAKrC,MAA9BsD,EAFaL,EAEbK,cAAeD,EAFFJ,EAEEI,MAEvB,OAAOC,EACHjB,EAAK6I,aAAa7I,EAAK4I,kBAAmB5H,GAC1ChB,EAAK6I,aAAahL,EAAMmD,MAG9B8F,iBAAmB,SAAArH,GACjBO,EAAKC,SAAS,SAAAtC,GAAK,MAAK,CACtBoJ,YACW,SAATtH,EAAkB9B,EAAMoJ,YAAc,EAAIpJ,EAAMoJ,YAAc,QAIpE+B,qBAAuB,WAAM,IAAAC,EACM/I,EAAKrC,MAA9BoJ,EADmBgC,EACnBhC,YAAac,EADMkB,EACNlB,QAGfmB,EAAiBjC,EAAcc,EAC/BoB,EAAkBD,EAAiBnB,EACzC,OAJU3H,OAAAgJ,EAAA,EAAAhJ,CAAOF,EAAKkI,iBAAiBiB,WAI3BC,MAAMH,EAAiBD,uFA3GjB,IAAAK,EACmBxI,KAAKH,MAAlCyH,EADUkB,EACVlB,OAAQpK,EADEsL,EACFtL,QAASqK,EADPiB,EACOjB,QACpBD,GACLpK,EAAQqK,8CAGSkB,EAAWC,GAAW,IAC/BvI,EAAUH,KAAKlD,MAAfqD,MACAnD,EAASgD,KAAKH,MAAd7C,KAEJyL,EAAUzL,OAASA,GAAQmD,GAC7BgF,QAAQwD,IAAI,SAGVD,EAAUvI,QAAUA,GACtBH,KAAKkH,4DA+FA,IAAA0B,EACsC5I,KAAKlD,MAA1CqD,EADDyI,EACCzI,MAAOE,EADRuI,EACQvI,aAAc6F,EADtB0C,EACsB1C,YACrB2C,EAAa7I,KAAKH,MAAlBgJ,SACR,OACErM,EAAAC,EAAAC,cAAA,WACGmM,GAAYrM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAE5BH,EAAAC,EAAAC,cAACoM,EAAD,CACEhJ,aAAcE,KAAKF,aACnBK,MAAOA,EACPD,iBAAkBF,KAAKE,iBACvBE,cAAeJ,KAAKI,cACpBC,aAAcA,EACdC,QAASN,KAAKiH,cAGhBzK,EAAAC,EAAAC,cAACqM,GAAD,CAAUxC,uBAAwBvG,KAAKuG,2BACvC/J,EAAAC,EAAAC,cAACsM,EAAD,CAAWzD,YAAavF,KAAKiI,yBAE5BjI,KAAKqH,iBAAiB7I,OAAS,IAC9BhC,EAAAC,EAAAC,cAACuM,GAAD,CACE/C,YAAaA,EACbF,QAAShG,KAAKgG,QACdC,iBAAkBjG,KAAKiG,mBAI3BzJ,EAAAC,EAAAC,cAACqE,EAAA,EAAD,cAlJkBI,aAyKpBiD,GAAO,CACXlH,QLvLqB,SAAAsE,GAAE,sBAAArF,EAAAkD,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAAxG,EAAAyG,KAAI,SAAAO,EAAOc,EAAUC,GAAjB,IAAAC,EAAAzH,EAAA,OAAAiG,EAAAxG,EAAA2G,KAAA,SAAAM,GAAA,cAAAA,EAAAJ,KAAAI,EAAAH,MAAA,UACrBkB,EAAQE,YAAcH,KADD,CAAAd,EAAAH,KAAA,eAAAG,EAAAkB,OAAA,wBAG3BC,YAAaJ,GACbF,EAAS2E,eAJkBxF,EAAAJ,KAAA,EAAAI,EAAAH,KAAA,EAMNhC,EAAWC,GANL,OAMnBxE,EANmB0G,EAAAqB,KAOzBR,EAAS4E,YAAmBnM,IAPH0G,EAAAH,KAAA,iBAAAG,EAAAJ,KAAA,GAAAI,EAAAuB,GAAAvB,EAAA,SASzByB,QAAQnH,MAAR,6BAAAU,OAAAgF,EAAAuB,KACAV,EAAS6E,YAAgB1F,EAAAuB,KAVA,yBAAAvB,EAAAC,SAAAF,EAAA,kBAAJ,gBAAA4F,EAAAC,GAAA,OAAAnN,EAAAyH,MAAA5D,KAAA6D,YAAA,IKwLvBzG,OL1KoB,SAAA2E,GAAG,sBAAAgB,EAAA1D,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAAxG,EAAAyG,KAAI,SAAAC,EAAOoB,EAAUC,GAAjB,IAAAC,EAAAxC,EAAA,OAAAgB,EAAAxG,EAAA2G,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACrBkB,EAAQE,YAAcH,KADD,CAAAnB,EAAAE,KAAA,eAAAF,EAAAuB,OAAA,wBAG3BC,YAAaJ,GACbF,EAASgF,eAJkBlG,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAOJzB,EAAWC,GAPP,cAOnBE,EAPmBoB,EAAA0B,KAAA1B,EAAAuB,OAAA,SAQlBL,EAASiF,YAAcvH,KARL,QAAAoB,EAAAC,KAAA,GAAAD,EAAA4B,GAAA5B,EAAA,SAUzB8B,QAAQnH,MAAR,2BAAAU,OAAA2E,EAAA4B,KACAV,EAASkF,YAAWpG,EAAA4B,KAXK,yBAAA5B,EAAAM,SAAAR,EAAA,kBAAJ,gBAAAuG,EAAAC,GAAA,OAAA5G,EAAAa,MAAA5D,KAAA6D,YAAA,KK6KVzC,sBAbA,SAAAtE,GAAK,MAAK,CACvBwK,OAAQsC,YAAa9M,GACrBE,KAAMH,EAAaC,GACnB+L,SAAU5L,EAAiBH,GAC3B+M,WAAY1M,EAAmBL,GAC/ByK,QAASuC,YAAWhN,KAUpBsH,GAFahD,CAGb2F","file":"static/js/11.e3446f23.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst JellyButton = ({ text, onClick, type, loading }) => (\n  <button type={type} className=\"jelly-button\" onClick={onClick}>\n    {loading ? (\n      <p className=\"super-slide\">Loading...</p>\n    ) : (\n      <p className=\"super-slide\">{text}</p>\n    )}\n  </button>\n);\n\nJellyButton.defaultProps = {\n  onClick: null,\n  loading: false,\n};\n\nJellyButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  loading: PropTypes.bool,\n};\n\nexport default JellyButton;\n","export const subsSelector = state => state.subscribtions.subs;\nexport const subsLoadSelector = state => state.subscribtions.loading.getSubs;\nexport const addSubLoadSelector = state => state.subscribtions.loading.addSub;\nexport const updateFavSubLoadSelector = state =>\n  state.subscribtions.loading.updateFavSub;\n\nexport const isSameDaySelector = state => state.subscribtions.date.sameDayAdded;\nexport const isSameWeekSelector = state =>\n  state.subscribtions.date.sameWeekAdded;\nexport const isSameMonthSelector = state =>\n  state.subscribtions.date.sameMonthAdded;\nexport const lastYearSelector = state => state.subscribtions.date.lastYearAdded;\n","/* eslint-disable */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport JellyButton from '../Buttons/JellyButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { addSubLoadSelector } from '../../redux/selectors/subscribtionSelectors';\n\nexport const toastError = () =>\n  toast.error('🤪 Sub already exists', {\n    position: 'top-center',\n    autoClose: 2000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n  });\n\nexport const toastSuccess = length =>\n  toast.success(`🤟 Sub added! Total ammout:  ${length}`, {\n    position: 'top-right',\n    autoClose: 2000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n  });\n\nclass SteamForm extends Component {\n  static propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n    handleFilterSubs: PropTypes.func.isRequired,\n    query: PropTypes.string.isRequired,\n    showFavorites: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    userID: '',\n  };\n\n  warn = (text) =>\n    toast.warn(`😤😤😤 ${ text ? text : \"Fill the field!!!\" } `, {\n      position: 'top-left',\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n    });\n\n  handleInputChange = ({ target: { name, value } }) =>\n    this.setState({ [name]: value });\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n    const { name, userID } = this.state;\n    if (name.trim() === '' || userID.trim() === '') return this.warn();\n    if (userID.includes('/')) return this.warn('Forgot to remove \"/\" ');\n    this.props.handleSubmit(this.state);\n    return this.setState({ name: '', userID: '' });\n  };\n\n  render() {\n    const { name, userID } = this.state;\n    const {\n      handleFilterSubs,\n      query,\n      showFavorites,\n      onChangeText,\n      loading,\n      onReset,\n    } = this.props;\n    return (\n      <form onSubmit={this.handleFormSubmit} className=\"sub-form\">\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          value={name}\n          name=\"name\"\n          onChange={this.handleInputChange}\n          className=\"sub-form__input\"\n          placeholder=\"Add sub here\"\n        />\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          value={userID}\n          name=\"userID\"\n          onChange={this.handleInputChange}\n          className=\"sub-form__input\"\n          placeholder=\"User id\"\n        />\n        <JellyButton text=\"Add new sub\" loading={loading} type=\"submit\" />\n        <div className=\"sub-form__filter-wrapper\">\n          {query && (\n            <div className=\"sub-form__clear-button-wrapper\">\n              <IconButton\n                onClick={() => onReset()}\n                className=\"sub-form__clear-button\"\n              >\n                <ClearIcon className=\"sub-form__clear-icon\" />\n              </IconButton>\n            </div>\n          )}\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            value={query}\n            autoFocus\n            placeholder={'filter sub here'}\n            name=\"query\"\n            onChange={handleFilterSubs}\n            className=\"sub-form__input\"\n          />\n        </div>\n        <JellyButton\n          text={onChangeText}\n          type=\"button\"\n          onClick={() => showFavorites()}\n        />\n        <ToastContainer\n          position=\"top-right\"\n          autoClose={4000}\n          hideProgressBar={false}\n          newestOnTop\n          closeOnClick\n          rtl={false}\n          pauseOnVisibilityChange\n          draggable\n          pauseOnHover\n        />\n      </form>\n    );\n  }\n}\nSteamForm.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mSTP = state => ({\n  loading: addSubLoadSelector(state),\n});\n\nexport default connect(mSTP)(SteamForm);\n","import axios from 'axios';\n\nconst URL = process.env.REACT_APP_URL;\n// const URL = 'http://localhost:5678';\n\nexport const getSubsApi = id =>\n  axios.get(`${URL}/subscribers/${id}`).then(response => response.data.subs);\n\nexport const postSubApi = sub =>\n  axios\n    .post(`${URL}/subscribers`, sub)\n    .then(response => response.data.newSub);\n\nexport const updateFavApi = (id, sub) =>\n  axios\n    .patch(`${URL}/subscribers/updateSub/${id}`, sub)\n    .then(response => response.data.updatedSub);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\n\nimport { updateFavSub } from '../../redux/operations/subscribtionsOperations';\nimport { timeAgo } from '../../helpers/dateDiff';\n\nconst SteamItem = ({ _id: id, name, date, favorite, updateFavSub }) => {\n  const [loading, setLoading] = useState(false);\n\n  const handleUpdateFavSub = async () => {\n    setLoading(true);\n\n    await updateFavSub(id, { favorite: !favorite });\n\n    setTimeout(async () => {\n      setLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <>\n      <div>\n        <h2>{name}</h2>\n        <p className=\"item-date\">Added: {`${timeAgo(date)}, ${date}`}</p>\n      </div>\n      <button\n        className=\"image-wrapper\"\n        type=\"button\"\n        onClick={() => handleUpdateFavSub()}\n      >\n        {loading ? (\n          <ClipLoader color=\"#fff\" loading={loading} />\n        ) : (\n          <img\n            className=\"item-image\"\n            src={\n              favorite\n                ? 'https://image.flaticon.com/icons/svg/148/148838.svg'\n                : 'https://image.flaticon.com/icons/svg/149/149219.svg'\n            }\n            alt=\"fav\"\n          />\n        )}\n      </button>\n    </>\n  );\n};\n\nSteamItem.defaultProps = {\n  favorite: false,\n};\n\nSteamItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  _id: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  favorite: PropTypes.bool,\n  updateFavSub: PropTypes.func.isRequired,\n};\n\nconst mDTP = {\n  updateFavSub,\n};\n\nexport default connect(\n  null,\n  mDTP,\n)(SteamItem);\n","import setAuthToken from '../../helpers/setAuthToken';\nimport {\n  subsRequestStart,\n  subsRequestSuccess,\n  subsRequestError,\n  addSubRequest,\n  addSubSuccess,\n  addSubError,\n  updateFavSubStart,\n  updateFavSubSuccess,\n  updateFavSubError,\n} from '../actions/subscribtionActions';\nimport { getSubsApi, postSubApi, updateFavApi } from '../../services/subsApi';\nimport { tokenSelector } from '../selectors/authSelectors';\n\n/* eslint-disable */\nexport const getSubs = id => async (dispatch, getState) => {\n  const token = tokenSelector(getState());\n  if (!token) return;\n  setAuthToken(token);\n  dispatch(subsRequestStart());\n  try {\n    const subs = await getSubsApi(id);\n    dispatch(subsRequestSuccess(subs));\n  } catch (err) {\n    console.error(`error while getting subs: ${err}`);\n    dispatch(subsRequestError(err));\n  }\n};\n\nexport const addSub = sub => async (dispatch, getState) => {\n  const token = tokenSelector(getState());\n  if (!token) return;\n  setAuthToken(token);\n  dispatch(addSubRequest());\n\n  try {\n    const newSub = await postSubApi(sub);\n    return dispatch(addSubSuccess(newSub));\n  } catch (err) {\n    console.error(`error while adding sub: ${err}`);\n    dispatch(addSubError(err));\n  }\n};\n\nexport const updateFavSub = (id, favorite) => async (dispatch, getState) => {\n  const token = tokenSelector(getState());\n  if (!token) return;\n  setAuthToken(token);\n  dispatch(updateFavSubStart());\n  try {\n    const sub = await updateFavApi(id, favorite);\n    return await dispatch(updateFavSubSuccess(sub));\n  } catch (err) {\n    dispatch(updateFavSubError(err));\n    console.error(`error while updating favorite sub: ${err}`);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport SteamItem from './SteamItem';\nimport { addSubLoadSelector } from '../../redux/selectors/subscribtionSelectors';\n\nconst SteamList = ({ subscribers, addSubLoading }) => {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (addSubLoading) {\n      return setLoading(true);\n    }\n\n    return setLoading(false);\n  }, [addSubLoading]);\n\n  return (\n    <ul className=\"subs-list container\">\n      {loading && (\n        <li className=\"subs-list__item--loader\">\n          <CircularProgress />\n        </li>\n      )}\n      {subscribers.map(sub => (\n        <li key={sub.userID} className=\"subs-list__item\">\n          <SteamItem {...sub} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nSteamList.propTypes = {\n  subscribers: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  addSubLoading: PropTypes.bool.isRequired,\n};\n\nconst mSTP = state => ({\n  addSubLoading: addSubLoadSelector(state),\n});\n\nexport default connect(mSTP)(SteamList);\n","export const START_PAGE = 1;\nexport const PER_PAGE_SUCBSCRIPTIONS_LIST = 20;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { IconButton } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\nimport { START_PAGE } from '../../helpers/constants';\n\nconst Pagination = ({ maxPage, handleChangePage, currentPage }) => (\n  <div className=\"pagination-wrapper\">\n    <IconButton\n      className=\"pagination-button\"\n      color=\"primary\"\n      name=\"prev\"\n      disabled={currentPage === START_PAGE}\n      onClick={() => handleChangePage('prev')}\n    >\n      <ArrowBackIosIcon\n        className=\"pagination-button\"\n        disabled={currentPage === START_PAGE}\n      />\n    </IconButton>\n    <h1>\n      Page {currentPage} of {maxPage()}\n    </h1>\n    <IconButton\n      className=\"pagination-button\"\n      name=\"next\"\n      disabled={currentPage === maxPage()}\n      onClick={() => handleChangePage('next')}\n    >\n      <ArrowForwardIosIcon\n        className=\"pagination-button\"\n        disabled={currentPage === START_PAGE}\n      />\n    </IconButton>\n  </div>\n);\n\nPagination.propTypes = {\n  maxPage: PropTypes.func.isRequired,\n  handleChangePage: PropTypes.func.isRequired,\n  currentPage: PropTypes.number.isRequired,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport * as selectors from '../../redux/selectors/subscribtionSelectors';\n\nfunction SubsInfo({\n  showTotalAmmountOfSubs,\n  sameDayAdded,\n  sameWeekAdded,\n  sameMonthAdded,\n  lastYearAdded,\n}) {\n  return (\n    <div className=\"subs-length-wrap\">\n      <p className=\"subs-length-text\">Total length: {showTotalAmmountOfSubs}</p>\n      <p className=\"subs-length-text\">Today added: {sameDayAdded}</p>\n      <p className=\"subs-length-text\">Added this week: {sameWeekAdded}</p>\n      <p className=\"subs-length-text\">Added this month: {sameMonthAdded}</p>\n      {lastYearAdded && (\n        <p className=\"subs-length-text\">Added last year: {lastYearAdded}</p>\n      )}\n    </div>\n  );\n}\n\nSubsInfo.defaultProps = {\n  lastYearAdded: 0,\n};\n\nSubsInfo.propTypes = {\n  showTotalAmmountOfSubs: PropTypes.number.isRequired,\n  sameDayAdded: PropTypes.number.isRequired,\n  sameWeekAdded: PropTypes.number.isRequired,\n  sameMonthAdded: PropTypes.number.isRequired,\n  lastYearAdded: PropTypes.number,\n};\n\nconst mSTP = state => ({\n  sameDayAdded: selectors.isSameDaySelector(state),\n  sameWeekAdded: selectors.isSameWeekSelector(state),\n  sameMonthAdded: selectors.isSameMonthSelector(state),\n  lastYearAdded: selectors.lastYearSelector(state),\n});\n\nexport default connect(mSTP)(SubsInfo);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport SteamForm, {\n  toastError,\n  toastSuccess,\n} from '../Components/SteamList/SteamForm';\nimport SteamList from '../Components/SteamList/SteamList';\nimport { getSubs, addSub } from '../redux/operations/subscribtionsOperations';\nimport { authSelector, idSelector } from '../redux/selectors/authSelectors';\nimport {\n  subsSelector,\n  subsLoadSelector,\n  addSubLoadSelector,\n} from '../redux/selectors/subscribtionSelectors';\nimport { START_PAGE, PER_PAGE_SUCBSCRIPTIONS_LIST } from '../helpers/constants';\nimport Pagination from '../Components/SteamList/Pagination';\nimport SubsInfo from '../Components/SteamList/SubsInfo';\n\nconst filterSubs = (arr, query = '') =>\n  arr.filter(\n    el =>\n      el.name.toLowerCase().includes(query.toLowerCase()) ||\n      el.userID === query,\n  );\n\nclass Subscribers extends Component {\n  state = {\n    query: '',\n    showFavorites: false,\n    onChangeText: 'Show favourites',\n    perPage: PER_PAGE_SUCBSCRIPTIONS_LIST,\n    currentPage: START_PAGE,\n  };\n\n  componentDidMount() {\n    const { isAuth, getSubs, ownerId } = this.props;\n    if (!isAuth) return;\n    getSubs(ownerId);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { query } = this.state;\n    const { subs } = this.props;\n\n    if (prevProps.subs !== subs && query) {\n      console.log('works');\n    }\n\n    if (prevState.query !== query) {\n      this.handleChangePageOnFilter();\n    }\n  }\n\n  resetFilter = () => this.setState({ query: '' });\n\n  handleChangePageOnFilter = () => {\n    const { currentPage } = this.state;\n    if (currentPage > this.maxPage()) {\n      this.setState({ currentPage: this.maxPage() });\n    }\n    if (currentPage < 1) {\n      this.setState({ currentPage: 1 });\n    }\n  };\n\n  maxPage = () => {\n    return Math.ceil(\n      this.renderSubsList().length / PER_PAGE_SUCBSCRIPTIONS_LIST,\n    );\n  };\n\n  handleSubmit = sub => {\n    const { isAuth, addSub, subs, ownerId } = this.props;\n    if (!isAuth) return;\n    const subAlreadyExists = subs.find(\n      el =>\n        el.name.toLowerCase().trim() === sub.name.toLocaleLowerCase().trim() ||\n        el.userID === sub.userID.trim(),\n    );\n\n    if (subAlreadyExists) {\n      toastError();\n    } else {\n      const subToAdd = {\n        favorite: false,\n        date: `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,\n        ...sub,\n        ownerId,\n      };\n\n      addSub(subToAdd).then(res => {\n        if (!res) return toastError();\n\n        return toastSuccess(subs.length + 1);\n      });\n    }\n  };\n\n  handleFilterSubs = e => this.setState({ query: e.target.value });\n\n  filterFavorites = () => this.props.subs.filter(el => el.favorite);\n\n  showFavorites = () =>\n    this.setState(state => ({\n      showFavorites: !state.showFavorites,\n      onChangeText: state.showFavorites ? 'Show favourites' : 'Show all',\n    }));\n\n  filteredSubs = (subs, query) => filterSubs(subs, query);\n\n  showTotalAmmountOfSubs = () => {\n    const { subs } = this.props;\n    const { showFavorites, query } = this.state;\n\n    return showFavorites\n      ? this.filteredSubs(this.filterFavorites(), query).length\n      : this.filteredSubs(subs, query).length;\n  };\n\n  renderSubsList = () => {\n    const { subs } = this.props;\n    const { showFavorites, query } = this.state;\n\n    return showFavorites\n      ? this.filteredSubs(this.filterFavorites(), query)\n      : this.filteredSubs(subs, query);\n  };\n\n  handleChangePage = name => {\n    this.setState(state => ({\n      currentPage:\n        name === 'next' ? state.currentPage + 1 : state.currentPage - 1,\n    }));\n  };\n\n  renderPaginationList = () => {\n    const { currentPage, perPage } = this.state;\n    const list = [...this.renderSubsList().reverse()];\n\n    const indexOfLastSub = currentPage * perPage;\n    const indexOfFirstSub = indexOfLastSub - perPage;\n    return list.slice(indexOfFirstSub, indexOfLastSub);\n  };\n\n  render() {\n    const { query, onChangeText, currentPage } = this.state;\n    const { subsLoad } = this.props;\n    return (\n      <div>\n        {subsLoad && <div className=\"rainbow-marker-loader\" />}\n\n        <SteamForm\n          handleSubmit={this.handleSubmit}\n          query={query}\n          handleFilterSubs={this.handleFilterSubs}\n          showFavorites={this.showFavorites}\n          onChangeText={onChangeText}\n          onReset={this.resetFilter}\n        />\n\n        <SubsInfo showTotalAmmountOfSubs={this.showTotalAmmountOfSubs()} />\n        <SteamList subscribers={this.renderPaginationList()} />\n\n        {this.renderSubsList().length > 20 && (\n          <Pagination\n            currentPage={currentPage}\n            maxPage={this.maxPage}\n            handleChangePage={this.handleChangePage}\n          />\n        )}\n\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nSubscribers.propTypes = {\n  isAuth: PropTypes.bool.isRequired,\n  getSubs: PropTypes.func.isRequired,\n  addSub: PropTypes.func.isRequired,\n  subs: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  subsLoad: PropTypes.bool.isRequired,\n  ownerId: PropTypes.string.isRequired,\n};\n\nconst mapSTP = state => ({\n  isAuth: authSelector(state),\n  subs: subsSelector(state),\n  subsLoad: subsLoadSelector(state),\n  addSubLoad: addSubLoadSelector(state),\n  ownerId: idSelector(state),\n});\n\nconst mDTP = {\n  getSubs,\n  addSub,\n};\n\nexport default connect(\n  mapSTP,\n  mDTP,\n)(Subscribers);\n"],"sourceRoot":""}