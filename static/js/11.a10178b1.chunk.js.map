{"version":3,"sources":["Components/Buttons/JellyButton.js","redux/selectors/subscribtionSelectors.js","Components/SteamList/SteamForm.js","services/subsApi.js","Components/SteamList/SteamItem.js","redux/operations/subscribtionsOperations.js","Components/SteamList/SteamList.js","helpers/constants.js","Components/SteamList/Pagination.js","Components/SteamList/SubsInfo.js","Pages/Subscribers.js"],"names":["JellyButton","_ref","text","onClick","type","loading","react_default","a","createElement","className","defaultProps","subsSelector","state","subscribtions","subs","subsLoadSelector","getSubs","addSubLoadSelector","addSub","isSameDaySelector","date","sameDayAdded","isSameWeekSelector","sameWeekAdded","isSameMonthSelector","sameMonthAdded","lastYearSelector","lastYearAdded","toastError","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","toastSuccess","length","success","concat","SteamForm","name","userID","warn","handleInputChange","_ref$target","target","value","_this","setState","Object","defineProperty","handleFormSubmit","e","preventDefault","_this$state","includes","props","handleSubmit","_this$state2","this","_this$props","handleFilterSubs","query","showFavorites","onChangeText","onReset","onSubmit","autoComplete","onChange","placeholder","Buttons_JellyButton","IconButton","Clear_default","autoFocus","react_toastify","newestOnTop","rtl","pauseOnVisibilityChange","Component","connect","URL","process","getSubsApi","id","axios","get","then","response","data","postSubApi","sub","post","addedSub","updateFavApi","patch","updatedSub","SteamItem","_id","favorite","updateFavSub","_useState","useState","_useState2","slicedToArray","setLoading","handleUpdateFavSub","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","setTimeout","_callee","_context","stop","apply","arguments","Fragment","timeAgo","react_spinners","color","src","alt","mDTP","_ref3","_callee3","dispatch","getState","token","_context3","tokenSelector","abrupt","setAuthToken","updateFavSubStart","sent","updateFavSubSuccess","t0","updateFavSubError","console","_x5","_x6","addSubLoading","subscribers","useEffect","map","key","SteamList_SteamItem","START_PAGE","PER_PAGE_SUCBSCRIPTIONS_LIST","Pagination","maxPage","handleChangePage","currentPage","disabled","ArrowBackIos_default","ArrowForwardIos_default","SubsInfo","showTotalAmmountOfSubs","selectors","filterSubs","arr","undefined","filter","el","toLowerCase","Subscribers","perPage","resetFilter","handleChangePageOnFilter","Math","ceil","renderSubsList","isAuth","ownerId","find","trim","toLocaleLowerCase","objectSpread","Date","toLocaleDateString","toLocaleTimeString","res","filterFavorites","filteredSubs","renderPaginationList","_this$state3","indexOfLastSub","indexOfFirstSub","toConsumableArray","reverse","slice","_this$props2","prevProps","prevState","log","_this$state4","subsLoad","SteamList_SteamForm","SteamList_SubsInfo","Components_SteamList_SteamList","SteamList_Pagination","subsRequestStart","subsRequestSuccess","subsRequestError","_x","_x2","newSub","addSubRequest","addSubSuccess","addSubError","_x3","_x4","authSelector","addSubLoad","idSelector"],"mappings":"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","file":"static/js/11.a10178b1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst JellyButton = ({ text, onClick, type, loading }) => (\n  <button type={type} className=\"jelly-button\" onClick={onClick}>\n    {loading ? (\n      <p className=\"super-slide\">Loading...</p>\n    ) : (\n      <p className=\"super-slide\">{text}</p>\n    )}\n  </button>\n);\n\nJellyButton.defaultProps = {\n  onClick: null,\n  loading: false,\n};\n\nJellyButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  loading: PropTypes.bool,\n};\n\nexport default JellyButton;\n","export const subsSelector = state => state.subscribtions.subs;\nexport const subsLoadSelector = state => state.subscribtions.loading.getSubs;\nexport const addSubLoadSelector = state => state.subscribtions.loading.addSub;\nexport const updateFavSubLoadSelector = state =>\n  state.subscribtions.loading.updateFavSub;\n\nexport const isSameDaySelector = state => state.subscribtions.date.sameDayAdded;\nexport const isSameWeekSelector = state =>\n  state.subscribtions.date.sameWeekAdded;\nexport const isSameMonthSelector = state =>\n  state.subscribtions.date.sameMonthAdded;\nexport const lastYearSelector = state => state.subscribtions.date.lastYearAdded;\n","/* eslint-disable */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\nimport JellyButton from '../Buttons/JellyButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport IconButton from '@material-ui/core/IconButton';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { addSubLoadSelector } from '../../redux/selectors/subscribtionSelectors';\n\nexport const toastError = () =>\n  toast.error('🤪 Sub already exists', {\n    position: 'top-center',\n    autoClose: 2000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n  });\n\nexport const toastSuccess = length =>\n  toast.success(`🤟 Sub added! Total ammout:  ${length}`, {\n    position: 'top-right',\n    autoClose: 2000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n  });\n\nclass SteamForm extends Component {\n  static propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n    handleFilterSubs: PropTypes.func.isRequired,\n    query: PropTypes.string.isRequired,\n    showFavorites: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    userID: '',\n  };\n\n  warn = () =>\n    toast.warn('😤😤😤 Fill the field!!!', {\n      position: 'top-left',\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n    });\n\n  handleInputChange = ({ target: { name, value } }) =>\n    this.setState({ [name]: value });\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n    const { name, userID } = this.state;\n    if (name === '') return this.warn();\n    if (userID.includes('/')) return this.warn();\n    this.props.handleSubmit(this.state);\n    return this.setState({ name: '', userID: '' });\n  };\n\n  render() {\n    const { name, userID } = this.state;\n    const {\n      handleFilterSubs,\n      query,\n      showFavorites,\n      onChangeText,\n      loading,\n      onReset,\n    } = this.props;\n    return (\n      <form onSubmit={this.handleFormSubmit} className=\"sub-form\">\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          value={name}\n          name=\"name\"\n          onChange={this.handleInputChange}\n          className=\"sub-form__input\"\n          placeholder=\"Add sub here\"\n        />\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          value={userID}\n          name=\"userID\"\n          onChange={this.handleInputChange}\n          className=\"sub-form__input\"\n          placeholder=\"User id (optional)\"\n        />\n        <JellyButton text=\"Add new sub\" loading={loading} type=\"submit\" />\n        <div className=\"sub-form__filter-wrapper\">\n          {query && (\n            <div className=\"sub-form__clear-button-wrapper\">\n              <IconButton\n                onClick={() => onReset()}\n                className=\"sub-form__clear-button\"\n              >\n                <ClearIcon className=\"sub-form__clear-icon\" />\n              </IconButton>\n            </div>\n          )}\n          <input\n            type=\"text\"\n            autoComplete=\"off\"\n            value={query}\n            autoFocus\n            placeholder={'filter sub here'}\n            name=\"query\"\n            onChange={handleFilterSubs}\n            className=\"sub-form__input\"\n          />\n        </div>\n        <JellyButton\n          text={onChangeText}\n          type=\"button\"\n          onClick={() => showFavorites()}\n        />\n        <ToastContainer\n          position=\"top-right\"\n          autoClose={4000}\n          hideProgressBar={false}\n          newestOnTop\n          closeOnClick\n          rtl={false}\n          pauseOnVisibilityChange\n          draggable\n          pauseOnHover\n        />\n      </form>\n    );\n  }\n}\nSteamForm.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n\nconst mSTP = state => ({\n  loading: addSubLoadSelector(state),\n});\n\nexport default connect(mSTP)(SteamForm);\n","import axios from 'axios';\n\nconst URL = process.env.REACT_APP_URL;\n// const URL = 'http://localhost:5678';\n\nexport const getSubsApi = id =>\n  axios.get(`${URL}/subscribers/${id}`).then(response => response.data.subs);\n\nexport const postSubApi = sub =>\n  axios\n    .post(`${URL}/subscribers`, sub)\n    .then(response => response.data.addedSub);\n\nexport const updateFavApi = (id, sub) =>\n  axios\n    .patch(`${URL}/subscribers/updateSub/${id}`, sub)\n    .then(response => response.data.updatedSub);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\n\nimport { updateFavSub } from '../../redux/operations/subscribtionsOperations';\nimport { timeAgo } from '../../helpers/dateDiff';\n\nconst SteamItem = ({ _id: id, name, date, favorite, updateFavSub }) => {\n  const [loading, setLoading] = useState(false);\n\n  const handleUpdateFavSub = async () => {\n    setLoading(true);\n\n    await updateFavSub(id, { favorite: !favorite });\n\n    setTimeout(async () => {\n      setLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <>\n      <div>\n        <h2>{name}</h2>\n        <p className=\"item-date\">Added: {`${timeAgo(date)}, ${date}`}</p>\n      </div>\n      <button\n        className=\"image-wrapper\"\n        type=\"button\"\n        onClick={() => handleUpdateFavSub()}\n      >\n        {loading ? (\n          <ClipLoader color=\"#fff\" loading={loading} />\n        ) : (\n          <img\n            className=\"item-image\"\n            src={\n              favorite\n                ? 'https://image.flaticon.com/icons/svg/148/148838.svg'\n                : 'https://image.flaticon.com/icons/svg/149/149219.svg'\n            }\n            alt=\"fav\"\n          />\n        )}\n      </button>\n    </>\n  );\n};\n\nSteamItem.defaultProps = {\n  favorite: false,\n};\n\nSteamItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  _id: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  favorite: PropTypes.bool,\n  updateFavSub: PropTypes.func.isRequired,\n};\n\nconst mDTP = {\n  updateFavSub,\n};\n\nexport default connect(\n  null,\n  mDTP,\n)(SteamItem);\n","import setAuthToken from '../../helpers/setAuthToken';\nimport {\n  subsRequestStart,\n  subsRequestSuccess,\n  subsRequestError,\n  addSubRequest,\n  addSubSuccess,\n  addSubError,\n  updateFavSubStart,\n  updateFavSubSuccess,\n  updateFavSubError,\n} from '../actions/subscribtionActions';\nimport { getSubsApi, postSubApi, updateFavApi } from '../../services/subsApi';\nimport { tokenSelector } from '../selectors/authSelectors';\n\n/* eslint-disable */\nexport const getSubs = id => async (dispatch, getState) => {\n  const token = tokenSelector(getState());\n  if (!token) return;\n  setAuthToken(token);\n  dispatch(subsRequestStart());\n  try {\n    const subs = await getSubsApi(id);\n    dispatch(subsRequestSuccess(subs));\n  } catch (err) {\n    console.error(`error while getting subs: ${err}`);\n    dispatch(subsRequestError(err));\n  }\n};\n\nexport const addSub = sub => async (dispatch, getState) => {\n  const token = tokenSelector(getState());\n  if (!token) return;\n  setAuthToken(token);\n  dispatch(addSubRequest());\n\n  try {\n    const newSub = await postSubApi(sub);\n    return dispatch(addSubSuccess(newSub));\n  } catch (err) {\n    console.error(`error while adding sub: ${err}`);\n    dispatch(addSubError(err));\n  }\n};\n\nexport const updateFavSub = (id, favorite) => async (dispatch, getState) => {\n  const token = tokenSelector(getState());\n  if (!token) return;\n  setAuthToken(token);\n  dispatch(updateFavSubStart());\n  try {\n    const sub = await updateFavApi(id, favorite);\n    return await dispatch(updateFavSubSuccess(sub));\n  } catch (err) {\n    dispatch(updateFavSubError(err));\n    console.error(`error while updating favorite sub: ${err}`);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport SteamItem from './SteamItem';\nimport { addSubLoadSelector } from '../../redux/selectors/subscribtionSelectors';\n\nconst SteamList = ({ subscribers, addSubLoading }) => {\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (addSubLoading) {\n      setLoading(true);\n    } else\n      setTimeout(() => {\n        setLoading(false);\n      }, 3000);\n  }, [addSubLoading]);\n\n  return (\n    <ul className=\"subs-list container\">\n      {loading && (\n        <li className=\"subs-list__item\">\n          <div className=\"rainbow-marker-loader\" />\n        </li>\n      )}\n      {subscribers.map(sub => (\n        <li key={sub.userID} className=\"subs-list__item\">\n          <SteamItem {...sub} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nSteamList.propTypes = {\n  subscribers: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  addSubLoading: PropTypes.bool.isRequired,\n};\n\nconst mSTP = state => ({\n  addSubLoading: addSubLoadSelector(state),\n});\n\nexport default connect(mSTP)(SteamList);\n","export const START_PAGE = 1;\nexport const PER_PAGE_SUCBSCRIPTIONS_LIST = 20;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { IconButton } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\nimport { START_PAGE } from '../../helpers/constants';\n\nconst Pagination = ({ maxPage, handleChangePage, currentPage }) => (\n  <div className=\"pagination-wrapper\">\n    <IconButton\n      className=\"pagination-button\"\n      color=\"primary\"\n      name=\"prev\"\n      disabled={currentPage === START_PAGE}\n      onClick={() => handleChangePage('prev')}\n    >\n      <ArrowBackIosIcon\n        className=\"pagination-button\"\n        disabled={currentPage === START_PAGE}\n      />\n    </IconButton>\n    <h1>\n      Page {currentPage} of {maxPage()}\n    </h1>\n    <IconButton\n      className=\"pagination-button\"\n      name=\"next\"\n      disabled={currentPage === maxPage()}\n      onClick={() => handleChangePage('next')}\n    >\n      <ArrowForwardIosIcon\n        className=\"pagination-button\"\n        disabled={currentPage === START_PAGE}\n      />\n    </IconButton>\n  </div>\n);\n\nPagination.propTypes = {\n  maxPage: PropTypes.func.isRequired,\n  handleChangePage: PropTypes.func.isRequired,\n  currentPage: PropTypes.number.isRequired,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport * as selectors from '../../redux/selectors/subscribtionSelectors';\n\nfunction SubsInfo({\n  showTotalAmmountOfSubs,\n  sameDayAdded,\n  sameWeekAdded,\n  sameMonthAdded,\n  lastYearAdded,\n}) {\n  return (\n    <div className=\"subs-length-wrap\">\n      <p className=\"subs-length-text\">Total length: {showTotalAmmountOfSubs}</p>\n      <p className=\"subs-length-text\">Today added: {sameDayAdded}</p>\n      <p className=\"subs-length-text\">Added this week: {sameWeekAdded}</p>\n      <p className=\"subs-length-text\">Added this month: {sameMonthAdded}</p>\n      {lastYearAdded && (\n        <p className=\"subs-length-text\">Added last year: {lastYearAdded}</p>\n      )}\n    </div>\n  );\n}\n\nSubsInfo.defaultProps = {\n  lastYearAdded: 0,\n};\n\nSubsInfo.propTypes = {\n  showTotalAmmountOfSubs: PropTypes.number.isRequired,\n  sameDayAdded: PropTypes.number.isRequired,\n  sameWeekAdded: PropTypes.number.isRequired,\n  sameMonthAdded: PropTypes.number.isRequired,\n  lastYearAdded: PropTypes.number,\n};\n\nconst mSTP = state => ({\n  sameDayAdded: selectors.isSameDaySelector(state),\n  sameWeekAdded: selectors.isSameWeekSelector(state),\n  sameMonthAdded: selectors.isSameMonthSelector(state),\n  lastYearAdded: selectors.lastYearSelector(state),\n});\n\nexport default connect(mSTP)(SubsInfo);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport SteamForm, {\n  toastError,\n  toastSuccess,\n} from '../Components/SteamList/SteamForm';\nimport SteamList from '../Components/SteamList/SteamList';\nimport { getSubs, addSub } from '../redux/operations/subscribtionsOperations';\nimport { authSelector, idSelector } from '../redux/selectors/authSelectors';\nimport {\n  subsSelector,\n  subsLoadSelector,\n  addSubLoadSelector,\n} from '../redux/selectors/subscribtionSelectors';\nimport { START_PAGE, PER_PAGE_SUCBSCRIPTIONS_LIST } from '../helpers/constants';\nimport Pagination from '../Components/SteamList/Pagination';\nimport SubsInfo from '../Components/SteamList/SubsInfo';\n\nconst filterSubs = (arr, query = '') =>\n  arr.filter(\n    el =>\n      el.name.toLowerCase().includes(query.toLowerCase()) ||\n      el.userID === query,\n  );\n\nclass Subscribers extends Component {\n  state = {\n    query: '',\n    showFavorites: false,\n    onChangeText: 'Show favourites',\n    perPage: PER_PAGE_SUCBSCRIPTIONS_LIST,\n    currentPage: START_PAGE,\n  };\n\n  componentDidMount() {\n    const { isAuth, getSubs, ownerId } = this.props;\n    if (!isAuth) return;\n    getSubs(ownerId);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { query } = this.state;\n    const { subs } = this.props;\n\n    if (prevProps.subs !== subs && query) {\n      console.log('works');\n    }\n\n    if (prevState.query !== query) {\n      this.handleChangePageOnFilter();\n    }\n  }\n\n  resetFilter = () => this.setState({ query: '' });\n\n  handleChangePageOnFilter = () => {\n    const { currentPage } = this.state;\n    if (currentPage > this.maxPage()) {\n      this.setState({ currentPage: this.maxPage() });\n    }\n    if (currentPage < 1) {\n      this.setState({ currentPage: 1 });\n    }\n  };\n\n  maxPage = () => {\n    return Math.ceil(\n      this.renderSubsList().length / PER_PAGE_SUCBSCRIPTIONS_LIST,\n    );\n  };\n\n  handleSubmit = sub => {\n    const { isAuth, addSub, subs, ownerId } = this.props;\n    if (!isAuth) return;\n    const subAlreadyExists = subs.find(\n      el =>\n        el.name.toLowerCase().trim() === sub.name.toLocaleLowerCase().trim() ||\n        el.userID === sub.userID.trim(),\n    );\n\n    if (subAlreadyExists) {\n      toastError();\n    } else {\n      const subToAdd = {\n        favorite: false,\n        date: `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,\n        ...sub,\n        ownerId,\n      };\n\n      addSub(subToAdd).then(res => {\n        if (!res) return;\n\n        toastSuccess(subs.length + 1);\n      });\n    }\n  };\n\n  handleFilterSubs = e => this.setState({ query: e.target.value });\n\n  filterFavorites = () => this.props.subs.filter(el => el.favorite);\n\n  showFavorites = () =>\n    this.setState(state => ({\n      showFavorites: !state.showFavorites,\n      onChangeText: state.showFavorites ? 'Show favourites' : 'Show all',\n    }));\n\n  filteredSubs = (subs, query) => filterSubs(subs, query);\n\n  showTotalAmmountOfSubs = () => {\n    const { subs } = this.props;\n    const { showFavorites, query } = this.state;\n\n    return showFavorites\n      ? this.filteredSubs(this.filterFavorites(), query).length\n      : this.filteredSubs(subs, query).length;\n  };\n\n  renderSubsList = () => {\n    const { subs } = this.props;\n    const { showFavorites, query } = this.state;\n\n    return showFavorites\n      ? this.filteredSubs(this.filterFavorites(), query)\n      : this.filteredSubs(subs, query);\n  };\n\n  handleChangePage = name => {\n    this.setState(state => ({\n      currentPage:\n        name === 'next' ? state.currentPage + 1 : state.currentPage - 1,\n    }));\n  };\n\n  renderPaginationList = () => {\n    const { currentPage, perPage } = this.state;\n    const list = [...this.renderSubsList().reverse()];\n\n    const indexOfLastSub = currentPage * perPage;\n    const indexOfFirstSub = indexOfLastSub - perPage;\n    return list.slice(indexOfFirstSub, indexOfLastSub);\n  };\n\n  render() {\n    const { query, onChangeText, currentPage } = this.state;\n    const { subsLoad } = this.props;\n    return (\n      <div>\n        {subsLoad && <div className=\"rainbow-marker-loader\" />}\n\n        <SteamForm\n          handleSubmit={this.handleSubmit}\n          query={query}\n          handleFilterSubs={this.handleFilterSubs}\n          showFavorites={this.showFavorites}\n          onChangeText={onChangeText}\n          onReset={this.resetFilter}\n        />\n\n        <SubsInfo showTotalAmmountOfSubs={this.showTotalAmmountOfSubs()} />\n        <SteamList subscribers={this.renderPaginationList()} />\n\n        {this.renderSubsList().length > 20 && (\n          <Pagination\n            currentPage={currentPage}\n            maxPage={this.maxPage}\n            handleChangePage={this.handleChangePage}\n          />\n        )}\n\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nSubscribers.propTypes = {\n  isAuth: PropTypes.bool.isRequired,\n  getSubs: PropTypes.func.isRequired,\n  addSub: PropTypes.func.isRequired,\n  subs: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  subsLoad: PropTypes.bool.isRequired,\n  ownerId: PropTypes.string.isRequired,\n};\n\nconst mapSTP = state => ({\n  isAuth: authSelector(state),\n  subs: subsSelector(state),\n  subsLoad: subsLoadSelector(state),\n  addSubLoad: addSubLoadSelector(state),\n  ownerId: idSelector(state),\n});\n\nconst mDTP = {\n  getSubs,\n  addSub,\n};\n\nexport default connect(\n  mapSTP,\n  mDTP,\n)(Subscribers);\n"],"sourceRoot":""}